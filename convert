#!/usr/bin/python

import subprocess
import os
import sys
import json
import re

class Constants:
  DATABASEFILENAME = "database"
  MINIMUMMATCHESNAME = 15
  MINIMUMMATCHESEVENT = 10
  NOSUBSREGEX = ["^bbc", "\.mp4$"]

class Node:
  pass

def parseStream(string):
  parsedStream = Node()
  for field in string.split("|"):
    fieldPair = field.split("=")
    if len(fieldPair) == 2:
      [key, value] = fieldPair
      keyPair = key.split(":")
      if len(keyPair) == 2:
        [superKey, subKey] = keyPair
        if hasattr(parsedStream, superKey):
          node = getattr(parsedStream, superKey)
        else:
          node = Node()
          setattr(parsedStream, superKey, node)
        setattr(node, subKey, value)
      else:
        setattr(parsedStream, key, value)
  return parsedStream

filename = sys.argv[1]
basename = os.path.basename(filename)

try:
  with open(Constants.DATABASEFILENAME, "r") as databaseFile:
    database = json.loads(databaseFile.read())
except:
  database = []

found = None
for index, currentRecord in enumerate(database):
  name = currentRecord["name"]
  minimumLength = min(len(basename), len(name))
  matches = [False] * minimumLength
  for i in range(0, minimumLength):
    if basename[i] == name[i]:
      matches[i] = True
  if matches.count(True) >= Constants.MINIMUMMATCHESNAME:
    currentRecord["name"] = str().\
      join([name[i] if matches[i] else "*" for i in range(0, minimumLength)])
    found = index
    break
if type(found) is int:
  record = database.pop(found)
else:
  record = {"name": basename}

  streams = []
  ffprobe = subprocess.Popen(
    ["ffprobe", "-show_streams", "-print_format", "compact", filename],
    stdout = subprocess.PIPE,
    stderr = open(os.devnull, 'w'))
  for line in ffprobe.stdout:
    streams.append(parseStream(line.strip()))
  ffprobe.wait()

  nosubs = False
  for regex in Constants.NOSUBSREGEX:
    if re.search(re.compile(regex, re.IGNORECASE), basename):
      nosubs = True
      break
  if nosubs:
    record["nosubs"] = True
  else:
    subtitleStreams = \
      [stream for stream in streams if stream.codec_type == "subtitle"]
    if len(subtitleStreams) == 1:
      subtitleStream = subtitleStreams[0]
    else:
      subtitleStream = \
        [stream for stream in subtitleStreams
          if stream.tag.language == "eng"][1]
    ffmpeg = subprocess.Popen(
      ["ffmpeg", "-i", filename, "-map", "0:" + subtitleStream.index,
        "-vn", "-an", "-f", "ass", "-"],
      stdout = subprocess.PIPE,
      stderr = open(os.devnull, 'w'))
    matches = 0
    for line in ffmpeg.stdout:
      lineSplit = line.split(":", 1)
      if len(lineSplit) == 2:
        section, data = lineSplit
        if section == "Dialogue":
          if data.split(",")[3] == "Default":
            matches += 1
    if matches > Constants.MINIMUMMATCHESEVENT:
      record["default"] = True

    audioStreams = \
      [stream for stream in streams if stream.codec_type == "audio"]
    if len(audioStreams) == 1:
      audioStream = audioStreams[0]
    else:
      audioStream = \
        [stream for stream in audioStreams if stream.tag.language != "eng"][0]
    exit(1)

  videoStream = \
    [stream for stream in streams if stream.codec_type == "video"][0]

database.append(record)
with open(Constants.DATABASEFILENAME, "w") as databaseFile:
  databaseFile.write(json.dumps(database, indent = 2))
