#!/usr/bin/python

import subprocess
import os
import sys
import json
import re

class Constants:
  DATABASEFILENAME = "database"
  MINIMUMMATCHESNAME = 15
  MINIMUMMATCHESEVENT = 10
  NOSUBSREGEX = ["^bbc", "\.mp4$"]
  TOLERANCE = 0.1
  QUALITY = 4

class Node:
  pass

def parseObject(string):
  parsedObject = Node()
  for field in string.split("|"):
    fieldPair = field.split("=")
    if len(fieldPair) == 2:
      [key, value] = fieldPair
      keyPair = key.split(":")
      if len(keyPair) == 2:
        [superKey, subKey] = keyPair
        if hasattr(parsedObject, superKey):
          node = getattr(parsedObject, superKey)
        else:
          node = Node()
          setattr(parsedObject, superKey, node)
        setattr(node, subKey, value)
      else:
        setattr(parsedObject, key, value)
  return parsedObject

filename = sys.argv[1]
basename = os.path.basename(filename)

try:
  with open(Constants.DATABASEFILENAME, "r") as databaseFile:
    database = json.loads(databaseFile.read())
except:
  database = []

found = None
for index, currentRecord in enumerate(database):
  name = currentRecord.keys()[0]
  minimumLength = min(len(basename), len(name))
  matches = [False] * minimumLength
  for i in range(0, minimumLength):
    if basename[i] == name[i]:
      matches[i] = True
  if matches.count(True) >= Constants.MINIMUMMATCHESNAME:
    currentRecord[
        str().join([name[i] if matches[i] else "*"
          for i in range(0, minimumLength)])] = \
      currentRecord.pop(name)
    found = index
    break
if type(found) is int:
  record = database.pop(found)
  fields = record.values()[0]
else:
  fields = {}
  record = {basename: fields}

  streams = []
  ffprobe = subprocess.Popen(
    ["ffprobe", "-show_streams", "-print_format", "compact", filename],
    stdout = subprocess.PIPE,
    stderr = open(os.devnull, 'w'))
  for line in ffprobe.stdout:
    streams.append(parseObject(line.strip()))
  ffprobe.wait()

  fields["burn"] = True
  for regex in Constants.NOSUBSREGEX:
    if re.search(re.compile(regex, re.IGNORECASE), basename):
      fields["burn"] = False
      break
  if fields["burn"]:
    subtitleStreams = \
      [stream for stream in streams if stream.codec_type == "subtitle"]

    videoStream = \
      [stream for stream in streams if stream.codec_type == "video"][0]

    fpsRational = \
      [int(number) for number in videoStream.r_frame_rate.split("/")]
    fps = fpsRational[0] / float(fpsRational[1])
    if fpsRational != [24000, 1001]:
      ffprobe = subprocess.Popen(
        ["ffprobe", "-show_frames", "-print_format", "compact", filename],
        stdout = subprocess.PIPE,
        stderr = open(os.devnull, 'w'))
      lastLine = None
      for line in ffprobe.stdout:
        lastLine = line
      frame = parseObject(line.strip())
      fps = int(frame.coded_picture_number) / float(frame.pkt_pts_time)
    assert abs(fps - 24) < Constants.TOLERANCE
    fields["speed"] = 25 / fps

    fields["scale"] = int(videoStream.coded_height) > 720

    if len(subtitleStreams) == 1:
      subtitleStream = subtitleStreams[0]
    else:
      subtitleStream = \
        [stream for stream in subtitleStreams
          if stream.tag.language == "eng"][1]
    fields["subtitle"] = subtitleStreams.index(subtitleStream)
    ffmpeg = subprocess.Popen(
      ["ffmpeg", "-i", filename, "-map", "0:" + subtitleStream.index,
        "-vn", "-an", "-f", "ass", "-"],
      stdout = subprocess.PIPE,
      stderr = open(os.devnull, 'w'))
    matches = 0
    for line in ffmpeg.stdout:
      lineSplit = line.split(":", 1)
      if len(lineSplit) == 2:
        section, data = lineSplit
        if section == "Dialogue":
          if data.split(",")[3] == "Default":
            matches += 1
    fields["default"] = matches > Constants.MINIMUMMATCHESEVENT

    audioStreams = \
      [stream for stream in streams if stream.codec_type == "audio"]
    if len(audioStreams) == 1:
      audioStream = audioStreams[0]
    else:
      audioStream = \
        [stream for stream in audioStreams if stream.tag.language != "eng"][0]
    fields["audio"] = int(audioStream.index)

database.append(record)
with open(Constants.DATABASEFILENAME, "w") as databaseFile:
  databaseFile.write(json.dumps(database, indent = 2))

if fields["burn"]:
  mplayerArguments = ["mplayer", "-nosound", "-benchmark", "-really-quiet",
    "-vo", "yuv4mpeg:file=/dev/stdout", "-sid", str(fields["subtitle"]),
    "--ass-force-style=" + ("Default." if fields["default"] else "") +
      "BackgroundColour=H77444444"]
  if fields["scale"]:
    mplayerArguments.extend(["-vf", "scale=-2:720"])
  mplayer = subprocess.Popen(mplayerArguments + [filename],
    stdout = subprocess.PIPE,
    stderr = open(os.devnull, 'w'))
  ffmpeg = subprocess.Popen(
    ["ffmpeg", "-y", "-r", "25", "-i", "-", "-i", filename,
      "-map", "0", "-map", "1:" + str(fields["audio"]),
      "-q:v", str(Constants.QUALITY),
      "-filter:a", "atempo=" + str(fields["speed"]) , "-b:a", "128k",
      basename],
    stdin = mplayer.stdout)
  ffmpeg.wait()
else:
  ffmpegArguments = ["ffmpeg", "-y", "-i", filename,
    "-q:v", str(Constants.QUALITY), "-c:a", "copy" , "-c:s", "copy"]
  if fields["scale"]:
    ffmpegArguments.extend(["-vf", "scale=-1:720"])
  ffmpeg = subprocess.Popen(ffmpegArguments + [basename])
  ffmpeg.wait()
