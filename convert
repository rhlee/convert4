#!/usr/bin/python

import subprocess
import os
import sys
import json

class Constants:
  DATABASEFILENAME = "database"
  MINIMUMMATCHES = 15

class Node:
  pass

def parseStream(string):
  parsedStream = Node()
  for field in string.split("|"):
    fieldPair = field.split("=")
    if len(fieldPair) == 2:
      [key, value] = fieldPair
      keyPair = key.split(":")
      if len(keyPair) == 2:
        [superKey, subKey] = keyPair
        if hasattr(parsedStream, superKey):
          node = getattr(parsedStream, superKey)
        else:
          node = Node()
          setattr(parsedStream, superKey, node)
        setattr(node, subKey, value)
      else:
        setattr(parsedStream, key, value)
  return parsedStream

filename = sys.argv[1]
basename = os.path.basename(filename)

try:
  with open(Constants.DATABASEFILENAME, "r") as databaseFile:
    database = json.loads(databaseFile.read())
except:
  database = []

found = None
for index, currentRecord in enumerate(database):
  name = currentRecord["name"]
  minimumLength = min(len(basename), len(name))
  matches = [False] * minimumLength
  for i in range(0, minimumLength):
    if basename[i] == name[i]:
      matches[i] = True
  if matches.count(True) >= Constants.MINIMUMMATCHES:
    currentRecord["name"] = str().\
      join([name[i] if matches[i] else "*" for i in range(0, minimumLength)])
    found = index
    break
if type(found) is int:
  record = database.pop(found)
else:
  record = {"name": basename}

database.append(record)
with open(Constants.DATABASEFILENAME, "w") as databaseFile:
  databaseFile.write(json.dumps(database, indent = 2))

streams = []
ffprobe = subprocess.Popen(
  ["ffprobe", "-show_streams", "-print_format", "compact", filename],
  stdout = subprocess.PIPE,
  stderr = open(os.devnull, 'w'))
for line in ffprobe.stdout:
  streams.append(parseStream(line.strip()))
